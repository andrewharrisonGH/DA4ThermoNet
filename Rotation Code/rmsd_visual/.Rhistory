geno_chr22.F <- geno_chr22.new[,pheno$gender=='F']
# Male population | Testing null hypothesis of association with BMI
pvals.M <- 1:885
for (i in 1:885){
x <- as.numeric(recode(genotype(geno_chr22.new[i,], sep=''),"A/A"=0,"A/B"=1,"B/A"=1,"B/B"=2))
fit.i <- lm(y ~ x)
pvals.M[i] <- coef(summary(fit.i))[2,4]
}
# Male population | Benjamin-Hochberg FDR-correction at 5%
p_ordered.M <- sort(pvals.M)
i <- 1
while (p_ordered.M[i] <= (i/m)*alpha) {
i <- i + 1
}
L <- i-1
SNPs.M <- pvals.M[pvals.M < p_ordered.M[L]]
# Female population | Testing null hypothesis of association with BMI
pvals.F <- 1:885
for (i in 1:885){
x <- as.numeric(recode(genotype(geno_chr22.new[i,], sep=''),"A/A"=0,"A/B"=1,"B/A"=1,"B/B"=2))
fit.i <- lm(y ~ x)
pvals.F[i] <- coef(summary(fit.i))[2,4]
}
# Female population | Benjamin-Hochberg FDR-correction at 5%
p_ordered.F <- sort(pvals.F)
i <- 1
while (p_ordered.F[i] <= (i/m)*alpha) {
i <- i + 1
}
L <- i-1
SNPs.F <- pvals.F[pvals.F < p_ordered.F[L]]
# Show significant SNPs for Male and Female populations
rownames(data.frame(geno_chr22.M)[pvals.M %in% SNPs.M,])
rownames(data.frame(geno_chr22.F)[pvals.F %in% SNPs.F,])
# Fit separate linear models and get 95% confidence intervals
SNP1.M <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[1],pheno$gender=='M'], sep=''))
SNP2.M <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[2],pheno$gender=='M'], sep=''))
SNP3.M <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[3],pheno$gender=='M'], sep=''))
SNP4.M <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[4],pheno$gender=='M'], sep=''))
SNP1.F <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[1],pheno$gender=='F'], sep=''))
SNP2.F <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[2],pheno$gender=='F'], sep=''))
SNP3.F <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[3],pheno$gender=='F'], sep=''))
SNP4.F <- as.numeric(genotype(geno_chr22.new[pvals==SNPs[4],pheno$gender=='F'], sep=''))
lm.fit3.M <- lm(pheno$bmi[pheno$gender=='M'] ~ SNP1.M + SNP2.M + SNP3.M + SNP4.M)
lm.fit3.F <- lm(pheno$bmi[pheno$gender=='F'] ~ SNP1.F + SNP2.F + SNP3.F + SNP4.F)
confint(lm.fit3.M) # Male Population linear model 95% confidence intervals
confint(lm.fit3.F) # Female Population linear model 95% confidence intervals
## ----message=FALSE-------------------------------------------------------
set.seed(2104)
library(multtest)
data(golub)
dim(golub)
table(golub.cl)
## ----message=FALSE-------------------------------------------------------
library(glmnet)
y <- factor(golub.cl, levels = c(0, 1), labels = c("ALL", "AML"))
y
cv.scores <- cv.glmnet(y = y,
x = t(golub),  # predictors are now columns
family = "binomial",
type.measure = "class",  # loss function
nfolds = 10)
## ----fig.height=5--------------------------------------------------------
plot(cv.scores, las = 1)
## ------------------------------------------------------------------------
lambda.opt <- cv.scores$lambda.min
print(c(lambda.opt, log(lambda.opt)), digits = 4)
cv.scores
cv.scores$lambda
## ----echo=FALSE----------------------------------------------------------
set.seed(2105)
## ------------------------------------------------------------------------
n   <- 250
x   <- runif(n, 0, 1)
eps <- runif(n, -1, 1)
y   <- sin(10 * x) + eps
## ----fig.height=5--------------------------------------------------------
TrueRegressionFunction <- function(x) {
return(sin(10 * x))
}
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
## ------------------------------------------------------------------------
CV.error <- function(x.comb, y.comb, split.ind, nn.k, cv.k) {
# Returns the CV training error for kNN regression
# Args:
#    x.comb : combined training/tuning predictor set
#    y.comb : combined training/tuning response set
#    split.ind : Randomised index that splits groups in
#                cv.k groups. Takes the values 1, 2, ..., cv.k
#    nn.k   : choice of k for kNN
#    cv.k   : choice of k for k-fold CV
cv.err <- 0
for(j in 1:cv.k) {
x.v     <- x.comb[split.ind == j]
y.v     <- y.comb[split.ind == j]
x.train <- x.comb[split.ind != j]
y.train <- y.comb[split.ind != j]
pred <- FNN::knn.reg(train = data.frame(x.train),
test  = data.frame(x.v),
y = y.train, k = nn.k)$pred
cv.err <- cv.err + mean((y.v - pred)^2)
}
return(cv.err / cv.k)
}
## ------------------------------------------------------------------------
CV.knn <- function(x.comb, y.comb, max.nn.k, cv.k) {
# Returns the CV model selection of k in kNN
# Args:
#    x.comb : combined training/tuning predictor set
#    y.comb : combined training/tuning response set
#    max.nn.k   : largest choice of k for kNN considered
#    cv.k   : choice of k for k-fold CV
# Returns: (list)
#   cv.min.k : the k for kNN that minimises the error
#   cv.err.k : all errors for k = 1, 2, ..., max.nn.k
#   min.err  : the minimised training error
# Step 1: Split x.comb and y.comb into cv.k groups
split.ind <- rep(1:cv.k, length.out = length(y.comb))
split.ind <- sample(split.ind)  # Randomising
# Step 2: Calculate
cv.err.k <- rep(0, max.nn.k)    # Vector of errors
for(nn.k in 1:max.nn.k)
cv.err.k[nn.k] <- CV.error(x.comb, y.comb, split.ind, nn.k, cv.k)
cv.min.k <- which.min(cv.err.k) # k with smallest error
return(list(cv.min.k = cv.min.k,
cv.err.k = cv.err.k,
min.err  = cv.err.k[cv.min.k]))
}
## ------------------------------------------------------------------------
index <- sample(n)
cutpoint <- n * 0.8
in.train <- index <= cutpoint
in.test  <- !in.train
x.comb <- x[in.train]
y.comb <- y[in.train]
x.test <- x[in.test]
y.test <- y[in.test]
## ------------------------------------------------------------------------
all.cv.errors <- CV.knn(x.comb, y.comb, 100, 10)
## ----fig.height=5,fig.width=5--------------------------------------------
plot(1:100,
all.cv.errors$cv.err,
ylim = range(0, all.cv.errors$cv.err),
xlab = "k",
ylab = "Estimated prediction error",
col  = "blue",
type = "l",
las  = 1)
abline(v = all.cv.errors$cv.min.k, lty = 2)
all.cv.errors$cv.min.k
all.cv.errors$cv.err.k
all.cv.errors$cv.err.k[15]
all.cv.errors$cv.err.k[15]^2
pred <- FNN::knn.reg(train = data.frame(c.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
pred <- FNN::knn.reg(train = data.frame(x.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
pred <- FNN::knn.reg(train = data.frame(x.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
curve(pred, x=x.test, add=TRUE, col="red")
curve(y=pred, x=x.test, add=TRUE, col="red")
functionexpr <- function(x){
return(pred[x.test==x])
}
curve(functionexpr, x=x.test, add=TRUE, col="red")
curve(functionexpr, 0, 1, add=TRUE, col="red")
abline(pred, x.test, add=TRUE, col="red")
plot(pred, x.test, add=TRUE, col="red")
plot(x.test, pred, add=TRUE, col="red")
curve(x.test, pred, add=TRUE, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
pred <- FNN::knn.reg(train = data.frame(x.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
lines(x.test, pred, type="o", add=TRUE, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
pred <- FNN::knn.reg(train = data.frame(x.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
lines(x.test, pred, add=TRUE, col="red")
curve(x.test, pred, add=TRUE, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
points(x.test, pred, add=TRUE, col="red")
lines(x.test, pred, col="red")
lines(x.test, pred, col="red", lwd=2)
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
lines(x.test, pred, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
curve(exprfunc, x.test, col="red")
exprfunc <- function(x){
return(pred[x.test==x])
}
curve(exprfunc, x.test, col="red")
lines(x.test,exprfunc(sorted), col="red")
sorted <- sort(x.test, decreasing=FALSE)
lines(x.test,exprfunc(sorted), col="red")
exprfunc(sorted)
x.test
pred
exprfunc <- function(x){
return(pred[x.test==x])
}
exprfunc(sorted)
x.sorted <- sort(x.test, decreasing=FALSE)
y.aligned <- pred[x.test==x]
lines(x.test, exprfunc(sorted), col="red")
y.aligned
pred[x.test==x]
x.test==x
y.aligned <- rep(0, len(x.test))
y.aligned <- rep(0, length(x.test))
for (i in c(1:length(x.test))){
y.aligned[i] <- x.test[x.test==x.sorted[i]]
}
y.aligned[i] <- pred[x.test==x.sorted[i]]
lines(x.test, y.aligned, col="red")
lines(y.aligned, x.test, col="red")
x.test
x.sorted
lines(y = y.aligned, x=x.test, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
lines(y = y.aligned, x=x.test, col="red")
pred
y.aligned
pred <- FNN::knn.reg(train = data.frame(x.comb),
test  = data.frame(x.test),
y = y.comb, k = all.cv.errors$cv.min.k)$pred
x.sorted <- sort(x.test, decreasing=FALSE)
y.aligned <- rep(0, length(x.test))
for (i in c(1:length(x.test))){
y.aligned[i] <- pred[x.test==x.sorted[i]]
}
lines(y = y.aligned, x=x.test, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
lines(y.aligned, x.test, col="red")
y.aligned
x.sorted
points(y.aligned, x.test, col="red")
points(y.aligned, x.sorted, col="red")
points(x.test, pred)
lines(x.test, pred)
points(x.sorted, y.aligned, col="red")
line(x.sorted, y.aligned, col="red")
lines(x.sorted, y.aligned, col="red")
plot(x, y, las = 1)
curve(TrueRegressionFunction, 0, 1, add = TRUE, col = "blue")
lines(x.sorted, y.aligned, col="red")
## ----echo=FALSE----------------------------------------------------------
set.seed(2124)
## ----message=FALSE-------------------------------------------------------
library(multtest)
data(golub)
## ------------------------------------------------------------------------
gol.fac <- factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
gol.fac
## ------------------------------------------------------------------------
genes.match1 <- grepl("CD",  golub.gnames[, 2])
genes.match2 <- grepl("Op",  golub.gnames[, 2])
genes.match3 <- grepl("MCM", golub.gnames[, 2])
## ------------------------------------------------------------------------
genes.match <- genes.match1 | genes.match2 | genes.match3
table(genes.match)
## ------------------------------------------------------------------------
run.t.test <- function(x) {
t.test(x ~ gol.fac)$p.value
}
p.values <- apply(golub[genes.match, ], 1, run.t.test)
golub[genes.match, ]
## ------------------------------------------------------------------------
p.values.signif <- p.values < (0.01 / length(p.values))
table(p.values.signif)
## ------------------------------------------------------------------------
golub.subset <- golub[genes.match, ][p.values.signif, ]
rownames(golub.subset) <- golub.gnames[genes.match, 2][p.values.signif]
## ------------------------------------------------------------------------
x <- t(golub.subset)
## ------------------------------------------------------------------------
colnames(x)
## ------------------------------------------------------------------------
pca1   <- eigen(cov(x))
lambda <- pca1$values
w      <- pca1$vectors
## ----fig.height=5--------------------------------------------------------
pve <- lambda / sum(lambda)
barplot(pve, ylab = "PVE", xlab = "PC", names.arg = 1:11, las = 1)
pca1$vectors
## ----fig.height=7--------------------------------------------------------
scores <- x %*% w[, 1:2]
scores
plot(scores, pch = as.numeric(gol.fac),
ylab = "2nd PC", xlab = "1st PC", las = 1)
## ----fig.height=5--------------------------------------------------------
pca2 <- prcomp(x)
summary(pca2)
## ------------------------------------------------------------------------
lambda.v2 <- pca2$sdev^2
w.v2      <- pca2$rotatation
scores.v2 <- pca2$x[, 1:2]  # just the first two PCs
pve.v2    <- lambda.v2 / sum(lambda.v2)
pve.v2
## ----fig.height=5--------------------------------------------------------
plot(pca2, main = "", las = 1)
## ----fig.height=7--------------------------------------------------------
plot(scores.v2, pch = as.numeric(gol.fac),
ylab = "2nd PC", xlab = "1st PC", las = 1)
## ----fig.height=4.7------------------------------------------------------
plot(scores.v2, type = "n", las = 1)
text(scores.v2, rownames(scores), col = as.numeric(gol.fac),
ylab = "2nd PC", xlab = "1st PC")
## ----fig.height=4.7------------------------------------------------------
clust <- hclust(dist(scores.v2), method = "single")
plot(clust)
## ------------------------------------------------------------------------
clust4 <- cutree(clust, 4)
table(clust4, gol.fac)
## ----fig.height=5--------------------------------------------------------
plot(scores.v2, type = "n")
text(scores.v2, rownames(scores), col = clust4,
ylab = "2nd PC", xlab = "1st PC")
golub[1:38,]
genes.match[1:38]
genes.match[1:38,]
p.values
genes.match
length(p.values)
library(ggplot2)
library(ggplot2)
data <- read.csv("rmsd_log.csv")
setwd("C:/Users/andyh/OneDrive/Documents/ResearchProject/Experiments/DA4ThermoNet/Rotation Code/rmsd_visual")
data <- read.csv("rmsd_log.csv")
plot(data$xrot_clock, data$rmsd)
ggplot(data, aes(x = xrot_clock, y = yrot_clock, color = rmsd)) +
geom_point(size = 3) +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "xrot vs yrot colored by RMSD",
x = "X Rotation",
y = "Y Rotation",
color = "RMSD")
plot(data$yrot_clock, data$rmsd)
plot(data$zrot_clock, data$rmsd)
ggplot(data, aes(x = xrot_clock, y = yrot_clock, fill = rmsd)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "xrot vs yrot colored by RMSD",
x = "X Rotation",
y = "Y Rotation",
fill = "RMSD")
library(plotly)
install.packages("plotly")
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface")
plotly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface")
library(plotly)
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface")
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD")
))
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface", , colorscale = "Viridis") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface", colorscale = "Viridis") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
data <- read.csv("rmsd_log.csv")
plot_ly(data, x = ~xrot_clock, y = ~yrot_clock, z = ~rmsd, type = "surface", colorscale = "Viridis") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
plot_ly(data, x = xrot_clock, y = yrot_clock, z = rmsd, type = "surface", colorscale = "Viridis") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
plot_ly(data, x = "xrot_clock", y = "yrot_clock", z = "rmsd", type = "surface", colorscale = "Viridis") %>%
layout(scene = list(
xaxis = list(title = "X Rotation", range = c(0, 360)),
yaxis = list(title = "Y Rotation", range = c(0, 360)),
zaxis = list(title = "RMSD", range = c(0, 40))
))
library(plotly)
library(tidyr)
library(dplyr)
# Make sure the data is gridded
grid_data <- data %>%
pivot_wider(names_from = yrot_clock, values_from = rmsd) %>%
arrange(xrot_clock)
x <- unique(data$xrot_clock)
y <- unique(data$yrot_clock)
# Create a matrix of z values (RMSD)
z <- matrix(data$rmsd, nrow = length(x), ncol = length(y), byrow = TRUE)
# Create the surface plot
plot_ly(x = ~x, y = ~y, z = ~z, type = "surface") %>%
layout(
title = "3D Surface of RMSD by Rotation",
scene = list(
xaxis = list(title = "X Rotation"),
yaxis = list(title = "Y Rotation"),
zaxis = list(title = "RMSD")
)
)
library(akima)
install.packages("akima")
library(akima)
interp_data <- with(data, interp(x = xrot_clock, y = yrot_clock, z = rmsd))
plot_ly(x = ~interp_data$x, y = ~interp_data$y, z = ~interp_data$z, type = "surface") %>%
layout(
title = "3D Interpolated RMSD Surface",
scene = list(
xaxis = list(title = "X Rotation"),
yaxis = list(title = "Y Rotation"),
zaxis = list(title = "RMSD")
)
)
View(data)
x <- data$xrot_clock
y <- data$yrot_clock
z <- data$rmsd
persp(x, y, z)
plot_ly(x = ~x, y = ~y, z = ~z, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "X Rotation"),
yaxis = list(title = "Y Rotation"),
zaxis = list(title = "RMSD")
)
)
# Load libraries
library(akima)
library(plotly)
library(readr)
library(dplyr)
# Read your data
data <- read_csv("your_file.csv")  # Replace with actual file path
# Read your data
data <- read_csv("rmsd_log.csv")  # Replace with actual file path
# Ensure (0, 0) is included in interpolation domain
if (!any(data$xrot_clock == 0 & data$yrot_clock == 0)) {
data <- bind_rows(data, tibble(xrot_clock = 0, yrot_clock = 0, rmsd = mean(data$rmsd)))
}
# Interpolate onto a grid
interp_data <- with(data, interp(
x = xrot_clock,
y = yrot_clock,
z = rmsd,
xo = seq(0, 360, length.out = 100),  # full rotation grid
yo = seq(0, 360, length.out = 100),
duplicate = "mean"
))
# Plot as interactive 3D surface
plot_ly(
x = interp_data$x,
y = interp_data$y,
z = interp_data$z,
type = "surface",
colorscale = list(c(0, 'blue'), c(1, 'red'))
) %>%
layout(
title = "RMSD Surface by X and Y Rotation",
scene = list(
xaxis = list(title = "X Rotation (°)"),
yaxis = list(title = "Y Rotation (°)"),
zaxis = list(title = "RMSD", range = c(0, 40))
)
)
plot_ly(x = ~x, y = ~y, z = ~z, type = "surface") %>%
layout(
scene = list(
xaxis = list(title = "X Rotation"),
yaxis = list(title = "Y Rotation"),
zaxis = list(title = "RMSD")
)
)
ggplot(data, aes(x = xrot_clock, y = yrot_clock, fill = rmsd)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "xrot vs yrot colored by RMSD",
x = "X Rotation",
y = "Y Rotation",
fill = "RMSD")
